name: Windows Admin Tests

on:
  workflow_call:
    inputs:
      go-version:
        description: 'Go version to use'
        required: true
        type: string
      timeout-minutes:
        description: 'Timeout for the job'
        required: false
        type: number
        default: 30

jobs:
  windows-admin-test:
    runs-on: windows-latest
    timeout-minutes: ${{ inputs.timeout-minutes }}
    
    env:
      GOGC: 50
      GOMEMLIMIT: 512MiB
      GOMAXPROCS: 2
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ inputs.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ inputs.go-version }}-
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Setup test environment with admin privileges
        run: |
          Write-Host "Setting up test environment with admin privileges..."
          
          # 管理者権限でディレクトリを作成
          New-Item -ItemType Directory -Force -Path test_output, test_data, coverage_reports
          
          # 管理者権限でファイルシステムの権限を確認
          Write-Host "Checking file system permissions..."
          Get-Acl . | Format-List
          
          # 管理者権限でレジストリアクセスをテスト
          Write-Host "Testing registry access..."
          try {
              $regPath = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion"
              Get-ItemProperty -Path $regPath -Name "ProgramFilesDir" -ErrorAction Stop
              Write-Host "✓ Registry access successful"
          } catch {
              Write-Host "✗ Registry access failed: $($_.Exception.Message)"
          }
        shell: powershell

      - name: Build with admin privileges
        run: |
          Write-Host "Building with admin privileges..."
          
          # 管理者権限でビルド設定
          $env:GOGC = "200"
          $env:GOMEMLIMIT = "256MiB"
          $env:GOMAXPROCS = "2"
          $env:CGO_ENABLED = "0"
          
          # 依存関係を事前にダウンロード
          Write-Host "Downloading dependencies..."
          go mod download
          
          # 管理者権限でビルド実行
          Write-Host "Running build with admin privileges..."
          $VERSION = "test"
          $BUILD_TIME = Get-Date -Format "yyyy-MM-dd_HH-mm-ss"
          go build -ldflags "-X github.com/sakuhanight/gopier/cmd.Version=$VERSION -X github.com/sakuhanight/gopier/cmd.BuildTime=$BUILD_TIME" -o gopier.exe
          
          if ($LASTEXITCODE -ne 0) {
              Write-Host "Build failed with exit code: $LASTEXITCODE"
              exit $LASTEXITCODE
          }
          
          # Verify build
          if (Test-Path "gopier.exe") {
              Write-Host "✓ Build successful: gopier.exe exists"
              .\gopier.exe --help
          } else {
              Write-Host "✗ Build failed: gopier.exe not found"
              exit 1
          }
        shell: powershell
        timeout-minutes: 10

      - name: Run tests with admin privileges
        run: |
          Write-Host "Running tests with admin privileges..."
          
          # 管理者権限でテスト実行
          $env:GOGC = "200"
          $env:GOMEMLIMIT = "256MiB"
          $env:GOMAXPROCS = "2"
          $env:CGO_ENABLED = "0"
          
          # 管理者権限でテスト実行
          Write-Host "Running unit tests with admin privileges..."
          go test -v -timeout=10m -parallel=2 ./internal/... ./cmd/...
          
          if ($LASTEXITCODE -ne 0) {
              Write-Host "Unit tests failed with exit code: $LASTEXITCODE"
              exit $LASTEXITCODE
          }
          
          Write-Host "✓ All tests passed with admin privileges"
        shell: powershell
        timeout-minutes: 15

      - name: Run integration tests with admin privileges
        run: |
          Write-Host "Running integration tests with admin privileges..."
          
          # 管理者権限で統合テスト実行
          $env:GOGC = "200"
          $env:GOMEMLIMIT = "256MiB"
          $env:GOMAXPROCS = "2"
          $env:CGO_ENABLED = "0"
          
          Write-Host "Running integration tests with admin privileges..."
          go test -v -timeout=10m -parallel=2 ./tests/...
          
          if ($LASTEXITCODE -ne 0) {
              Write-Host "Integration tests failed with exit code: $LASTEXITCODE"
              exit $LASTEXITCODE
          }
          
          Write-Host "✓ Integration tests passed with admin privileges"
        shell: powershell
        timeout-minutes: 10

      - name: Test admin-specific functionality
        run: |
          Write-Host "Testing admin-specific functionality..."
          
          # 管理者権限でシステムレベルの操作をテスト
          Write-Host "Testing system-level operations..."
          
          # 管理者権限でサービス情報を取得
          try {
              $services = Get-Service | Select-Object -First 5
              Write-Host "✓ Service enumeration successful"
              $services | Format-Table -AutoSize
          } catch {
              Write-Host "✗ Service enumeration failed: $($_.Exception.Message)"
          }
          
          # 管理者権限でプロセス情報を取得
          try {
              $processes = Get-Process | Select-Object -First 5
              Write-Host "✓ Process enumeration successful"
              $processes | Format-Table -AutoSize
          } catch {
              Write-Host "✗ Process enumeration failed: $($_.Exception.Message)"
          }
          
          # 管理者権限でファイルシステムの詳細情報を取得
          try {
              $driveInfo = Get-WmiObject -Class Win32_LogicalDisk
              Write-Host "✓ Drive information retrieval successful"
              $driveInfo | Format-Table -AutoSize
          } catch {
              Write-Host "✗ Drive information retrieval failed: $($_.Exception.Message)"
          }
          
          Write-Host "✓ Admin-specific functionality tests completed"
        shell: powershell
        timeout-minutes: 5

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-admin-test-${{ github.sha }}
          path: |
            gopier.exe
            test_output/
            coverage_reports/
          retention-days: 30 