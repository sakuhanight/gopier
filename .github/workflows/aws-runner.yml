name: AWS Self-Hosted Runner Tests

on:
  workflow_call:
    inputs:
      go-version:
        description: 'Go version to use'
        required: true
        type: string
      test-type:
        description: 'Type of tests to run'
        required: true
        type: string
        default: 'large-files'
      timeout-minutes:
        description: 'Timeout for the job'
        required: false
        type: number
        default: 60

jobs:
  start-runner:
    name: Start AWS EC2 runner
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          ec2-image-id: ${{ secrets.EC2_IMAGE_ID }}
          ec2-instance-type: ${{ secrets.EC2_INSTANCE_TYPE }}
          subnet-id: ${{ secrets.EC2_SUBNET_ID }}
          security-group-id: ${{ secrets.EC2_SECURITY_GROUP_ID }}
          iam-role-name: ${{ secrets.EC2_IAM_ROLE_NAME }}
          aws-resource-tags: >
            [
              {"Key": "Name", "Value": "gopier-test-runner"},
              {"Key": "GitHubRepository", "Value": "${{ github.repository }}"},
              {"Key": "TestType", "Value": "${{ inputs.test-type }}"}
            ]
          block-device-mappings: >
            [
              {"DeviceName": "/dev/sda1", "Ebs": {"VolumeSize": 50, "VolumeType": "gp3"}}
            ]
          pre-runner-script: |
            sudo yum update -y
            sudo yum install -y git wget unzip
            # Goのインストール
            wget https://go.dev/dl/go${{ inputs.go-version }}.linux-amd64.tar.gz
            sudo tar -C /usr/local -xzf go${{ inputs.go-version }}.linux-amd64.tar.gz
            echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
            source ~/.bashrc
            # メモリ最適化設定
            echo 'export GOGC=100' >> ~/.bashrc
            echo 'export GOMEMLIMIT=4GiB' >> ~/.bashrc
            echo 'export GOMAXPROCS=8' >> ~/.bashrc

  run-large-tests:
    name: Run large file tests on AWS runner
    needs: start-runner
    runs-on: ${{ needs.start-runner.outputs.label }}
    timeout-minutes: ${{ inputs.timeout-minutes }}
    
    # AWSランナー用のメモリ最適化設定
    env:
      GOGC: 100
      GOMEMLIMIT: 4GiB
      GOMAXPROCS: 8
      AWS_RUNNER: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ inputs.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ inputs.go-version }}-

      - name: Install dependencies
        run: go mod download

      - name: Setup test environment
        run: |
          mkdir -p test_output test_data coverage_reports large_test_data
          chmod 755 test_output test_data coverage_reports large_test_data
          
          # システム情報を確認
          echo "=== System Information ==="
          echo "CPU cores: $(nproc)"
          echo "Memory: $(free -h)"
          echo "Disk space: $(df -h)"
          echo "Go version: $(go version)"
          echo "Environment variables:"
          echo "GOGC: $GOGC"
          echo "GOMEMLIMIT: $GOMEMLIMIT"
          echo "GOMAXPROCS: $GOMAXPROCS"

      - name: Run large file tests
        run: |
          echo "Running large file tests on AWS runner..."
          
          # 大きなファイルテストを実行
          echo "Running copier tests with large files..."
          go test -v -timeout=30m -parallel=4 ./internal/copier/... || exit 1
          
          # ベンチマークテストを実行
          echo "Running benchmark tests..."
          go test -v -bench=. -benchmem -timeout=30m ./internal/copier/... || exit 1
          
          # カバレッジテストを実行
          echo "Running coverage tests..."
          PKGS=$(go list ./internal/...)
          go test -v -coverprofile=coverage.out -timeout=30m -parallel=4 $PKGS || exit 1
          
          if [ -f coverage.out ]; then
            go tool cover -html=coverage.out -o coverage.html 2>/dev/null || echo "HTML report generation skipped"
            go tool cover -func=coverage.out || echo "Coverage function report generation skipped"
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: aws-runner-results-${{ inputs.test-type }}-${{ inputs.go-version }}
          path: |
            test_output/
            coverage_reports/
            coverage.out
            coverage.html
          retention-days: 30

  stop-runner:
    name: Stop AWS EC2 runner
    needs:
      - start-runner
      - run-large-tests
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }} 