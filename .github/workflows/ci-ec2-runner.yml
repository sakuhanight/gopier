name: CI with EC2 Self-Hosted Runner (DEPRECATED - Use ec2-runner-manager.yml)

# このワークフローは非推奨です。ec2-runner-manager.ymlを使用してください。
# on:
#   push:
#     branches: [ main, develop ]
#   pull_request:
#     branches: [ main, develop ]

# 手動実行のみ許可
on:
  workflow_dispatch:
    inputs:
      force_run:
        description: '強制実行（非推奨）'
        required: true
        default: 'false'
        type: boolean

# デフォルトの権限設定
permissions:
  contents: read
  actions: read
  security-events: write
  pull-requests: read

# 環境変数の定義（メモリ制限なし）
env:
  CI: true
  GITHUB_ACTIONS: true
  TESTING: 1
  GOGC: 100
  # メモリ制限を削除してリソースを最大限活用

jobs:
  # 非推奨警告
  deprecation-warning:
    name: Deprecation Warning
    runs-on: ubuntu-latest
    steps:
      - name: Show deprecation warning
        run: |
          echo "⚠️  WARNING: This workflow is deprecated! ⚠️"
          echo ""
          echo "This workflow uses the deprecated machulav/ec2-github-runner@v2 action."
          echo "Please use the new ec2-runner-manager.yml workflow instead."
          echo ""
          echo "Migration guide: docs/EC2_RUNNER_MIGRATION.md"
          echo ""
          echo "To continue with this workflow, set force_run=true in workflow_dispatch."
          
          if [[ "${{ github.event.inputs.force_run }}" != "true" ]]; then
            echo "❌ Workflow execution cancelled. Use ec2-runner-manager.yml instead."
            exit 1
          fi
          
          echo "⚠️  Force run enabled. This workflow will execute but is not recommended."

  # EC2ランナーを起動
  start-ec2-runner:
    name: Start EC2 Self-Hosted Runner
    runs-on: ubuntu-latest
    needs: deprecation-warning
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check AWS credentials
        id: check-aws
        run: |
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ] || [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ] || [ -z "${{ secrets.AWS_REGION }}" ]; then
            echo "AWS credentials not configured. Using GitHub-hosted runners."
            echo "status=no-aws" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "status=aws-available" >> $GITHUB_OUTPUT
      
      - name: Configure AWS credentials
        if: steps.check-aws.outputs.status == 'aws-available'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup environment variables
        if: steps.check-aws.outputs.status == 'aws-available'
        run: |
          # 環境変数を設定
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
          echo "EC2_INSTANCE_TYPE=${{ secrets.EC2_INSTANCE_TYPE || 'c5.2xlarge' }}" >> $GITHUB_ENV
          echo "EC2_IMAGE_ID=${{ secrets.EC2_IMAGE_ID }}" >> $GITHUB_ENV
          echo "EC2_SUBNET_ID=${{ secrets.EC2_SUBNET_ID }}" >> $GITHUB_ENV
          echo "EC2_SECURITY_GROUP_ID=${{ secrets.EC2_SECURITY_GROUP_ID }}" >> $GITHUB_ENV
          echo "EC2_IAM_ROLE_NAME=${{ secrets.EC2_IAM_ROLE_NAME }}" >> $GITHUB_ENV
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          echo "GITHUB_REPOSITORY=${{ github.repository }}" >> $GITHUB_ENV

      - name: Make automation script executable
        if: steps.check-aws.outputs.status == 'aws-available'
        run: |
          chmod +x scripts/aws-ec2-automation.sh

      - name: Start EC2 runner
        id: start-ec2-runner
        if: steps.check-aws.outputs.status == 'aws-available'
        run: |
          # ランナーラベルを生成
          LABEL="gopier-ci-runner-$(date +%s)"
          
          echo "Starting EC2 runner with label: $LABEL"
          
          # ランナー起動
          ./scripts/aws-ec2-automation.sh start --label "$LABEL" --type "$EC2_INSTANCE_TYPE" --timeout 60
          
          # ランナー情報を取得
          RUNNER_INFO=$(aws ec2 describe-instances \
            --filters "Name=tag:RunnerLabel,Values=$LABEL" "Name=instance-state-name,Values=running" \
            --query 'Reservations[0].Instances[0].[InstanceId,PublicIpAddress]' \
            --output text 2>/dev/null || echo "None None")
          
          if [[ "$RUNNER_INFO" != "None None" ]]; then
            INSTANCE_ID=$(echo "$RUNNER_INFO" | cut -f1)
            PUBLIC_IP=$(echo "$RUNNER_INFO" | cut -f2)
            echo "label=$LABEL" >> $GITHUB_OUTPUT
            echo "ec2-instance-id=$INSTANCE_ID" >> $GITHUB_OUTPUT
            echo "EC2 Runner started successfully:"
            echo "  Instance ID: $INSTANCE_ID"
            echo "  Public IP: $PUBLIC_IP"
            echo "  Label: $LABEL"
          else
            echo "Failed to start EC2 runner"
            exit 1
          fi

      - name: Wait for runner registration
        if: steps.check-aws.outputs.status == 'aws-available'
        run: |
          LABEL="${{ steps.start-ec2-runner.outputs.label }}"
          TIMEOUT=300  # 5分
          
          echo "Waiting for runner registration (timeout: 5 minutes)..."
          
          # ランナーの登録を待機
          for i in $(seq 1 $TIMEOUT); do
            if gh api repos/${{ github.repository }}/actions/runners --jq ".runners[] | select(.labels[].name == \"$LABEL\") | .status" 2>/dev/null | grep -q "online"; then
              echo "Runner $LABEL is online!"
              break
            fi
            
            if [ $i -eq $TIMEOUT ]; then
              echo "Timeout waiting for runner registration"
              exit 1
            fi
            
            sleep 1
          done

  # 依存関係の事前ダウンロードとキャッシュ
  setup:
    runs-on: ${{ needs.start-ec2-runner.outputs.label || 'ubuntu-latest' }}
    needs: [start-ec2-runner, deprecation-warning]
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Generate cache key
        id: cache-key
        run: |
          echo "value=go-${{ runner.os }}-${{ hashFiles('**/go.sum') }}-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ steps.cache-key.outputs.value }}
          restore-keys: |
            go-${{ runner.os }}-${{ hashFiles('**/go.sum') }}-
            go-${{ runner.os }}-

      - name: Download dependencies
        run: go mod download

  # Linux テスト（Go 1.21）
  test-linux-go121:
    runs-on: ${{ needs.start-ec2-runner.outputs.label || 'ubuntu-latest' }}
    needs: [start-ec2-runner, setup]
    strategy:
      matrix:
        test-suite: [unit, integration, coverage]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            go-${{ runner.os }}-${{ hashFiles('**/go.sum') }}-
            go-${{ runner.os }}-

      - name: Setup test environment
        run: |
          mkdir -p test_output coverage_reports
          chmod 755 test_output coverage_reports
          
          # システム情報を表示
          echo "=== System Information ==="
          echo "CPU cores: $(nproc)"
          echo "Memory: $(free -h)"
          echo "Disk space: $(df -h)"
          echo "Go version: $(go version)"
          echo "Runner: ${{ runner.name }}"
          echo "Labels: ${{ runner.labels }}"

      - name: Run unit tests
        if: matrix.test-suite == 'unit'
        run: |
          echo "Running unit tests on Linux with Go 1.21..."
          go test -v -timeout=15m -parallel=8 ./cmd/... ./internal/...

      - name: Run integration tests
        if: matrix.test-suite == 'integration'
        run: |
          echo "Running integration tests on Linux with Go 1.21..."
          go test -v -timeout=15m -parallel=8 ./tests/...

      - name: Run coverage tests
        if: matrix.test-suite == 'coverage'
        run: |
          echo "Running coverage tests on Linux with Go 1.21..."
          go test -v -coverprofile=coverage.out -timeout=15m -parallel=8 ./cmd/... ./internal/...
          if [ -f coverage.out ]; then
            go tool cover -html=coverage.out -o coverage.html
            go tool cover -func=coverage.out
          fi

      - name: Upload coverage to Codecov
        if: matrix.test-suite == 'coverage' && hashFiles('coverage.out') != ''
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: linux-go121
          name: codecov-linux-go121
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  # Linux テスト（Go 1.22）
  test-linux-go122:
    runs-on: ${{ needs.start-ec2-runner.outputs.label || 'ubuntu-latest' }}
    needs: [start-ec2-runner, setup]
    strategy:
      matrix:
        test-suite: [unit, integration, coverage]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            go-${{ runner.os }}-${{ hashFiles('**/go.sum') }}-
            go-${{ runner.os }}-

      - name: Setup test environment
        run: |
          mkdir -p test_output coverage_reports
          chmod 755 test_output coverage_reports
          
          # システム情報を表示
          echo "=== System Information ==="
          echo "CPU cores: $(nproc)"
          echo "Memory: $(free -h)"
          echo "Disk space: $(df -h)"
          echo "Go version: $(go version)"
          echo "Runner: ${{ runner.name }}"
          echo "Labels: ${{ runner.labels }}"

      - name: Run unit tests
        if: matrix.test-suite == 'unit'
        run: |
          echo "Running unit tests on Linux with Go 1.22..."
          go test -v -timeout=15m -parallel=8 ./cmd/... ./internal/...

      - name: Run integration tests
        if: matrix.test-suite == 'integration'
        run: |
          echo "Running integration tests on Linux with Go 1.22..."
          go test -v -timeout=15m -parallel=8 ./tests/...

      - name: Run coverage tests
        if: matrix.test-suite == 'coverage'
        run: |
          echo "Running coverage tests on Linux with Go 1.22..."
          go test -v -coverprofile=coverage.out -timeout=15m -parallel=8 ./cmd/... ./internal/...
          if [ -f coverage.out ]; then
            go tool cover -html=coverage.out -o coverage.html
            go tool cover -func=coverage.out
          fi

      - name: Upload coverage to Codecov
        if: matrix.test-suite == 'coverage' && hashFiles('coverage.out') != ''
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: linux-go122
          name: codecov-linux-go122
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  # ビルドテスト
  build:
    runs-on: ${{ needs.start-ec2-runner.outputs.label || 'ubuntu-latest' }}
    needs: [start-ec2-runner, setup]
    strategy:
      matrix:
        platform: [linux, windows, darwin]
        arch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            go-${{ runner.os }}-${{ hashFiles('**/go.sum') }}-
            go-${{ runner.os }}-

      - name: Build for ${{ matrix.platform }}/${{ matrix.arch }}
        run: |
          echo "Building for ${{ matrix.platform }}/${{ matrix.arch }}..."
          
          # クロスコンパイル環境の設定
          if [[ "${{ matrix.platform }}" == "windows" ]]; then
            export CC=x86_64-w64-mingw32-gcc
            export CGO_ENABLED=1
          fi
          
          # ビルド実行
          GOOS=${{ matrix.platform }} GOARCH=${{ matrix.arch }} go build -v -ldflags="-s -w" -o gopier-${{ matrix.platform }}-${{ matrix.arch }} ./cmd/gopier
          
          # ファイルサイズ確認
          ls -la gopier-${{ matrix.platform }}-${{ matrix.arch }}*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gopier-${{ matrix.platform }}-${{ matrix.arch }}
          path: gopier-${{ matrix.platform }}-${{ matrix.arch }}*

  # ランナー停止（テスト完了後）
  stop-ec2-runner:
    name: Stop EC2 Runner
    runs-on: ubuntu-latest
    needs: [start-ec2-runner, test-linux-go121, test-linux-go122, build]
    if: always() && needs.start-ec2-runner.outputs.label
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup environment variables
        run: |
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
          echo "EC2_INSTANCE_TYPE=${{ secrets.EC2_INSTANCE_TYPE || 'c5.2xlarge' }}" >> $GITHUB_ENV
          echo "EC2_IMAGE_ID=${{ secrets.EC2_IMAGE_ID }}" >> $GITHUB_ENV
          echo "EC2_SUBNET_ID=${{ secrets.EC2_SUBNET_ID }}" >> $GITHUB_ENV
          echo "EC2_SECURITY_GROUP_ID=${{ secrets.EC2_SECURITY_GROUP_ID }}" >> $GITHUB_ENV
          echo "EC2_IAM_ROLE_NAME=${{ secrets.EC2_IAM_ROLE_NAME }}" >> $GITHUB_ENV
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          echo "GITHUB_REPOSITORY=${{ github.repository }}" >> $GITHUB_ENV

      - name: Make automation script executable
        run: chmod +x scripts/aws-ec2-automation.sh

      - name: Stop EC2 runner
        run: |
          echo "Stopping EC2 runner after tests..."
          ./scripts/aws-ec2-automation.sh stop
          echo "EC2 runner stopped successfully"

      - name: Verify runner cleanup
        run: |
          echo "Verifying runner cleanup..."
          sleep 30  # ランナーの完全停止を待機
          
          # 実行中のインスタンスを確認
          RUNNING_INSTANCES=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=*GitHub-Runner*" "Name=instance-state-name,Values=running" \
            --query 'Reservations[*].Instances[*].InstanceId' \
            --output text)
          
          if [ -n "$RUNNING_INSTANCES" ]; then
            echo "Warning: Some runners are still running: $RUNNING_INSTANCES"
          else
            echo "All EC2 runners have been stopped successfully"
          fi 