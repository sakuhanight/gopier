name: CI with EC2 Self-Hosted Runner

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# デフォルトの権限設定
permissions:
  contents: read
  actions: read
  security-events: write
  pull-requests: read

# 環境変数の定義（メモリ制限なし）
env:
  CI: true
  GITHUB_ACTIONS: true
  TESTING: 1
  GOGC: 100
  # メモリ制限を削除してリソースを最大限活用

jobs:
  # EC2ランナーを起動
  start-ec2-runner:
    name: Start EC2 Self-Hosted Runner
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Check AWS credentials
        run: |
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ] || [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ] || [ -z "${{ secrets.AWS_REGION }}" ]; then
            echo "AWS credentials not configured. Using GitHub-hosted runners."
            exit 0
          fi
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          ec2-image-id: ${{ secrets.EC2_IMAGE_ID }}
          ec2-instance-type: ${{ secrets.EC2_INSTANCE_TYPE }}
          subnet-id: ${{ secrets.EC2_SUBNET_ID }}
          security-group-id: ${{ secrets.EC2_SECURITY_GROUP_ID }}
          iam-role-name: ${{ secrets.EC2_IAM_ROLE_NAME }}
          aws-resource-tags: >
            [
              {"Key": "Name", "Value": "gopier-ci-runner"},
              {"Key": "GitHubRepository", "Value": "${{ github.repository }}"},
              {"Key": "Workflow", "Value": "ci-ec2-runner"}
            ]
          pre-runner-script: |
            # システムの更新
            sudo yum update -y
            sudo yum install -y git wget unzip
            
            # Goのインストール（複数バージョン）
            wget https://go.dev/dl/go1.21.linux-amd64.tar.gz
            wget https://go.dev/dl/go1.22.linux-amd64.tar.gz
            sudo tar -C /usr/local -xzf go1.21.linux-amd64.tar.gz
            sudo tar -C /usr/local -xzf go1.22.linux-amd64.tar.gz
            
            # 環境変数の設定（メモリ制限なし）
            echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
            echo 'export GOGC=100' >> ~/.bashrc
            echo 'export GOMAXPROCS=8' >> ~/.bashrc
            # GOMEMLIMITを設定しない（制限なし）
            
            # Windows用のツールチェーン（クロスコンパイル用）
            sudo yum install -y mingw64-gcc
            
            source ~/.bashrc

  # 依存関係の事前ダウンロードとキャッシュ
  setup:
    runs-on: ${{ needs.start-ec2-runner.outputs.label || 'ubuntu-latest' }}
    needs: start-ec2-runner
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Generate cache key
        id: cache-key
        run: |
          echo "value=go-${{ runner.os }}-${{ hashFiles('**/go.sum') }}-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ steps.cache-key.outputs.value }}
          restore-keys: |
            go-${{ runner.os }}-${{ hashFiles('**/go.sum') }}-
            go-${{ runner.os }}-

      - name: Download dependencies
        run: go mod download

  # Linux テスト（Go 1.21）
  test-linux-go121:
    runs-on: ${{ needs.start-ec2-runner.outputs.label || 'ubuntu-latest' }}
    needs: [start-ec2-runner, setup]
    strategy:
      matrix:
        test-suite: [unit, integration, coverage]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            go-${{ runner.os }}-${{ hashFiles('**/go.sum') }}-
            go-${{ runner.os }}-

      - name: Setup test environment
        run: |
          mkdir -p test_output coverage_reports
          chmod 755 test_output coverage_reports
          
          # システム情報を表示
          echo "=== System Information ==="
          echo "CPU cores: $(nproc)"
          echo "Memory: $(free -h)"
          echo "Disk space: $(df -h)"
          echo "Go version: $(go version)"

      - name: Run unit tests
        if: matrix.test-suite == 'unit'
        run: |
          echo "Running unit tests on Linux with Go 1.21..."
          go test -v -timeout=15m -parallel=8 ./cmd/... ./internal/...

      - name: Run integration tests
        if: matrix.test-suite == 'integration'
        run: |
          echo "Running integration tests on Linux with Go 1.21..."
          go test -v -timeout=15m -parallel=8 ./tests/...

      - name: Run coverage tests
        if: matrix.test-suite == 'coverage'
        run: |
          echo "Running coverage tests on Linux with Go 1.21..."
          go test -v -coverprofile=coverage.out -timeout=15m -parallel=8 ./cmd/... ./internal/...
          if [ -f coverage.out ]; then
            go tool cover -html=coverage.out -o coverage.html
            go tool cover -func=coverage.out
          fi

      - name: Upload coverage to Codecov
        if: matrix.test-suite == 'coverage' && hashFiles('coverage.out') != ''
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: linux-go121
          name: codecov-linux-go121
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  # Linux テスト（Go 1.22）
  test-linux-go122:
    runs-on: ${{ needs.start-ec2-runner.outputs.label || 'ubuntu-latest' }}
    needs: [start-ec2-runner, setup]
    strategy:
      matrix:
        test-suite: [unit, integration]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            go-${{ runner.os }}-${{ hashFiles('**/go.sum') }}-
            go-${{ runner.os }}-

      - name: Setup test environment
        run: |
          mkdir -p test_output coverage_reports
          chmod 755 test_output coverage_reports

      - name: Run unit tests
        if: matrix.test-suite == 'unit'
        run: |
          echo "Running unit tests on Linux with Go 1.22..."
          go test -v -timeout=15m -parallel=8 ./cmd/... ./internal/...

      - name: Run integration tests
        if: matrix.test-suite == 'integration'
        run: |
          echo "Running integration tests on Linux with Go 1.22..."
          go test -v -timeout=15m -parallel=8 ./tests/...

  # Windows テスト（クロスコンパイル）
  test-windows:
    runs-on: ${{ needs.start-ec2-runner.outputs.label || 'ubuntu-latest' }}
    needs: [start-ec2-runner, setup]
    strategy:
      matrix:
        go-version: ['1.21', '1.22']
        test-suite: [unit, integration]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            go-${{ runner.os }}-${{ hashFiles('**/go.sum') }}-
            go-${{ runner.os }}-

      - name: Setup Windows test environment
        run: |
          mkdir -p test_output coverage_reports
          chmod 755 test_output coverage_reports
          
          # Windows用の環境変数設定
          export GOOS=windows
          export GOARCH=amd64
          export CGO_ENABLED=0

      - name: Build for Windows
        run: |
          echo "Building for Windows with Go ${{ matrix.go-version }}..."
          go build -buildvcs=false -ldflags "-X github.com/sakuhanight/gopier/cmd.Version=test" -o gopier.exe

      - name: Run unit tests for Windows
        if: matrix.test-suite == 'unit'
        run: |
          echo "Running unit tests for Windows with Go ${{ matrix.go-version }}..."
          go test -v -timeout=15m -parallel=8 ./cmd/... ./internal/...

      - name: Run integration tests for Windows
        if: matrix.test-suite == 'integration'
        run: |
          echo "Running integration tests for Windows with Go ${{ matrix.go-version }}..."
          go test -v -timeout=15m -parallel=8 ./tests/...

  # ベンチマークテスト
  benchmark:
    runs-on: ${{ needs.start-ec2-runner.outputs.label || 'ubuntu-latest' }}
    needs: [start-ec2-runner, setup]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            go-${{ runner.os }}-${{ hashFiles('**/go.sum') }}-
            go-${{ runner.os }}-

      - name: Run benchmarks
        run: |
          echo "Running benchmarks..."
          go test -bench=. -benchmem -timeout=30m ./internal/... 2>/dev/null || echo "No benchmarks found"

  # セキュリティスキャン
  security:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install Nancy
        run: |
          echo "Installing Nancy security scanner..."
          go install github.com/sonatype-nexus-community/nancy@latest

      - name: Run security scan
        run: |
          echo "Running security scan..."
          go list -json -deps ./... | nancy sleuth || echo "Security scan completed"

  # ビルドとアーティファクト作成
  build:
    runs-on: ubuntu-latest
    needs: [test-linux-go121, test-linux-go122, test-windows, benchmark, security]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            go-${{ runner.os }}-${{ hashFiles('**/go.sum') }}-
            go-${{ runner.os }}-

      - name: Setup build environment
        run: |
          mkdir -p build_output dist
          chmod 755 build_output dist

      - name: Build
        run: make build

      - name: Test build
        run: |
          echo "Testing build output..."
          ./gopier --help || exit 1
          ./gopier --create-config || exit 1
          echo "Build test completed successfully"

      - name: Cross-platform build
        run: make cross-build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gopier-build-${{ github.sha }}
          path: |
            gopier
            gopier.exe
            build/
            build_output/
            dist/
          retention-days: 30

  # EC2ランナーを停止
  stop-ec2-runner:
    name: Stop EC2 Self-Hosted Runner
    needs:
      - start-ec2-runner
      - test-linux-go121
      - test-linux-go122
      - test-windows
      - benchmark
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.start-ec2-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-ec2-runner.outputs.ec2-instance-id }} 