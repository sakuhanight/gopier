name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.21, 1.22]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: make test

      - name: Run tests with coverage
        run: make test-coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: ${{ github.ref == 'refs/heads/develop' && 'develop' || 'unittests' }}
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  test-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        go-version: [1.21, 1.22]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
      
      - name: Install dependencies
        run: go mod download
      
      - name: Verify Go installation
        run: |
          go version
          go env GOPATH
          go env GOROOT
      
      - name: Build
        run: pwsh -NonInteractive -NoProfile -Command "& { .\build.ps1 build }"
        timeout-minutes: 5
      
      - name: Verify build output
        run: |
          if (Test-Path "gopier.exe") {
            Write-Host "✓ Build successful: gopier.exe exists"
            .\gopier.exe --help
          } else {
            Write-Host "✗ Build failed: gopier.exe not found"
            exit 1
          }
      
      - name: Test
        run: pwsh -Command ".\build.ps1 test"
        timeout-minutes: 10
      
      - name: Coverage
        run: pwsh -Command ".\build.ps1 test-coverage"
        timeout-minutes: 10
      
      - name: Verify coverage file
        run: |
          if (Test-Path "coverage.out") {
            Write-Host "✓ Coverage file generated: coverage.out"
            $size = (Get-Item "coverage.out").Length
            Write-Host "Coverage file size: $size bytes"
          } else {
            Write-Host "✗ Coverage file not found"
            exit 1
          }
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: windows
          name: codecov-windows
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
            ${{ runner.os }}-go-

      - name: Build
        run: make build

      - name: Test build
        run: |
          ./gopier --help
          ./gopier --create-config 