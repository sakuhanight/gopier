name: CI Simple

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  actions: read
  security-events: write
  pull-requests: read

env:
  CI: true
  GITHUB_ACTIONS: true
  TESTING: 1
  GOGC: 50
  GOMEMLIMIT: 512MiB
  GOMAXPROCS: 4

jobs:
  # Linux テスト（Go 1.21 & 1.22）
  test-linux:
    strategy:
      matrix:
        go-version: ['1.21', '1.22']
        include:
          - go-version: '1.21'
            coverage-flag: 'unittests'
          - go-version: '1.22'
            coverage-flag: 'unittests'
    runs-on: [self-hosted, Linux]
    timeout-minutes: 25

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Setup test environment
        run: |
          mkdir -p test_output test_data coverage_reports
          chmod 755 test_output test_data coverage_reports

      - name: Run unit tests
        run: |
          echo "Running unit tests for Go ${{ matrix.go-version }} on Linux..."
          go test -v -timeout=10m -parallel=4 -coverprofile=coverage.out ./cmd/... ./internal/... || exit 1

      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          go test -v -timeout=10m -parallel=2 ./tests/... || exit 1

      - name: Upload coverage to Codecov
        if: github.ref == 'refs/heads/develop'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: ${{ matrix.coverage-flag }}
          fail_ci_if_error: false

  # Windows テスト（Go 1.21 & 1.22）
  test-windows:
    strategy:
      matrix:
        go-version: ['1.21', '1.22']
        include:
          - go-version: '1.21'
            coverage-flag: 'unittests'
          - go-version: '1.22'
            coverage-flag: 'unittests'
    runs-on: [self-hosted, Windows]
    timeout-minutes: 35

    steps:
      - name: Create unique working directory
        run: |
          $jobId = "${{ github.run_id }}-${{ github.job }}-${{ matrix.go-version }}"
          $uniqueDir = "work-$jobId"
          New-Item -ItemType Directory -Force -Path $uniqueDir
          Set-Location $uniqueDir
          Write-Host "Working in unique directory: $uniqueDir"
        shell: powershell

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: ${{ github.run_id }}-${{ github.job }}-${{ matrix.go-version }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          Set-Location "${{ github.run_id }}-${{ github.job }}-${{ matrix.go-version }}"
          go mod download
        shell: powershell

      - name: Setup test environment
        run: |
          Set-Location "${{ github.run_id }}-${{ github.job }}-${{ matrix.go-version }}"
          New-Item -ItemType Directory -Force -Path test_output, test_data, coverage_reports
        shell: powershell

      - name: Build for testing
        run: |
          Set-Location "${{ github.run_id }}-${{ github.job }}-${{ matrix.go-version }}"
          Write-Host "Building for testing..."
          $env:GOGC = "200"
          $env:GOMEMLIMIT = "256MiB"
          $env:GOMAXPROCS = "2"
          $env:CGO_ENABLED = "0"
          
          go build -o gopier.exe
          
          if (Test-Path "gopier.exe") {
              Write-Host "✓ Build successful"
          } else {
              Write-Host "✗ Build failed"
              exit 1
          }
        shell: powershell
        timeout-minutes: 5

      - name: Run unit tests
        run: |
          Set-Location "${{ github.run_id }}-${{ github.job }}-${{ matrix.go-version }}"
          Write-Host "Running unit tests for Go ${{ matrix.go-version }} on Windows..."
          
          $env:GOGC = "200"
          $env:GOMEMLIMIT = "256MiB"
          $env:GOMAXPROCS = "2"
          
          go test -v -timeout=10m -parallel=2 -coverprofile=coverage.out ./cmd/... ./internal/...
          if ($LASTEXITCODE -ne 0) {
              Write-Host "Unit tests failed"
              exit $LASTEXITCODE
          }
        shell: powershell

      - name: Run integration tests
        run: |
          Set-Location "${{ github.run_id }}-${{ github.job }}-${{ matrix.go-version }}"
          Write-Host "Running integration tests..."
          go test -v -timeout=10m -parallel=1 ./tests/...
          if ($LASTEXITCODE -ne 0) {
              Write-Host "Integration tests failed"
              exit $LASTEXITCODE
          }
        shell: powershell

      - name: Upload coverage to Codecov
        if: github.ref == 'refs/heads/develop'
        uses: codecov/codecov-action@v4
        with:
          file: ${{ github.run_id }}-${{ github.job }}-${{ matrix.go-version }}/coverage.out
          flags: ${{ matrix.coverage-flag }}
          fail_ci_if_error: false

      - name: Cleanup unique directory
        run: |
          $jobId = "${{ github.run_id }}-${{ github.job }}-${{ matrix.go-version }}"
          $uniqueDir = "work-$jobId"
          if (Test-Path $uniqueDir) {
              Remove-Item -Path $uniqueDir -Recurse -Force
          }
        shell: powershell

  # Windows管理者権限テスト
  test-windows-admin:
    runs-on: [self-hosted, Windows]
    timeout-minutes: 40
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Create unique working directory
        run: |
          $jobId = "${{ github.run_id }}-${{ github.job }}"
          $uniqueDir = "work-$jobId"
          New-Item -ItemType Directory -Force -Path $uniqueDir
          Set-Location $uniqueDir
          Write-Host "Working in unique directory: $uniqueDir"
        shell: powershell

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: ${{ github.run_id }}-${{ github.job }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-1.21-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-1.21-
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          Set-Location "${{ github.run_id }}-${{ github.job }}"
          go mod download
        shell: powershell

      - name: Setup test environment
        run: |
          Set-Location "${{ github.run_id }}-${{ github.job }}"
          New-Item -ItemType Directory -Force -Path test_output, test_data
        shell: powershell

      - name: Build for admin testing
        run: |
          Set-Location "${{ github.run_id }}-${{ github.job }}"
          Write-Host "Building for admin testing..."
          go build -o gopier.exe
        shell: powershell

      - name: Run admin privilege tests
        run: |
          Set-Location "${{ github.run_id }}-${{ github.job }}"
          Write-Host "Running admin privilege tests..."
          # 管理者権限テストを強制実行するための環境変数を設定
          $env:FORCE_ADMIN_TESTS = "1"
          $env:RUN_ADMIN_TESTS = "true"
          Write-Host "Environment variables set for admin tests"
          go test -v -timeout=15m -run "WithAdmin" ./internal/permissions/...
          if ($LASTEXITCODE -ne 0) {
              Write-Host "Admin tests failed"
              exit $LASTEXITCODE
          }
        shell: powershell

      - name: Cleanup unique directory
        run: |
          $jobId = "${{ github.run_id }}-${{ github.job }}"
          $uniqueDir = "work-$jobId"
          if (Test-Path $uniqueDir) {
              Remove-Item -Path $uniqueDir -Recurse -Force
          }
        shell: powershell

  # ベンチマークテスト
  benchmark:
    strategy:
      matrix:
        platform: [Linux, Windows]
        go-version: ['1.21']
    runs-on: [self-hosted, Linux]
    timeout-minutes: 30
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Setup benchmark environment
        run: |
          if [ "${{ matrix.platform }}" = "Linux" ]; then
            mkdir -p benchmark_output
            chmod 755 benchmark_output
          else
            New-Item -ItemType Directory -Force -Path benchmark_output
          fi

      - name: Run benchmarks
        run: |
          echo "Running benchmarks on ${{ matrix.platform }}..."
          go test -v -bench=. -benchmem -timeout=20m ./internal/... ./cmd/... || exit 1

  # ビルドジョブ
  build:
    runs-on: [self-hosted, Linux]
    needs: [test-linux, test-windows, benchmark]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-1.21-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-1.21-
            ${{ runner.os }}-go-

      - name: Setup build environment
        run: |
          mkdir -p build_output dist
          chmod 755 build_output dist

      - name: Build
        run: make build

      - name: Test build
        run: |
          echo "Testing build output..."
          ./gopier --help || exit 1
          ./gopier --create-config || exit 1
          echo "Build test completed successfully"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gopier-build-${{ github.sha }}
          path: |
            gopier
            build_output/
            dist/
          retention-days: 30 