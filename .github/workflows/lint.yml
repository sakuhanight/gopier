name: Lint

on:
  workflow_call:
    inputs:
      go-version:
        description: 'Go version to use'
        required: true
        type: string
        default: '1.21'
      platform:
        description: 'Platform to run linting on'
        required: true
        type: string
        default: 'self-hosted'
      timeout-minutes:
        description: 'Timeout for the job'
        required: false
        type: number
        default: 10

jobs:
  lint:
    runs-on: ${{ inputs.platform }}
    timeout-minutes: ${{ inputs.timeout-minutes }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ inputs.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ inputs.go-version }}-
            ${{ runner.os }}-go-

      - name: Install linting tools
        run: |
          echo "Installing linting tools..."
          go install golang.org/x/lint/golint@latest
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          go install golang.org/x/tools/cmd/goimports@latest
          go install github.com/fzipp/gocyclo/cmd/gocyclo@latest

      - name: Run gofmt check
        run: |
          echo "Running gofmt check..."
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted with gofmt:"
            gofmt -s -l .
            exit 1
          else
            echo "✓ Code is properly formatted with gofmt"
          fi

      - name: Run goimports check
        run: |
          echo "Running goimports check..."
          if [ "$(goimports -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted with goimports:"
            goimports -l .
            exit 1
          else
            echo "✓ Code is properly formatted with goimports"
          fi

      - name: Run golint
        run: |
          echo "Running golint..."
          golint -set_exit_status ./... || echo "golint completed"

      - name: Run golangci-lint
        run: |
          echo "Running golangci-lint..."
          golangci-lint run ./... || echo "golangci-lint completed"

      - name: Run cyclomatic complexity check
        run: |
          echo "Running cyclomatic complexity check..."
          gocyclo -over 15 ./... || echo "Complexity check completed"

      - name: Run go vet
        run: |
          echo "Running go vet..."
          go vet ./...

      - name: Run staticcheck
        run: |
          echo "Running staticcheck..."
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck ./... || echo "staticcheck completed"

      - name: Check for common issues
        run: |
          echo "Checking for common issues..."
          
          # 未使用の変数やインポートをチェック
          go build -o /dev/null ./... || echo "Build check completed"
          
          # エラーハンドリングのチェック
          if grep -r "if err != nil" . --include="*.go" | grep -v "return err" | head -5; then
            echo "Potential error handling issues found"
          else
            echo "✓ Error handling looks good"
          fi

      - name: Upload lint report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-report-${{ runner.os }}-${{ inputs.go-version }}
          path: |
            *.log
            *.txt
          retention-days: 7 