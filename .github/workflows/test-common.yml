name: Test Common

on:
  workflow_call:
    inputs:
      go-version:
        description: 'Go version to use'
        required: true
        type: string
      platform:
        description: 'Platform to run tests on'
        required: true
        type: string
        default: 'ubuntu-latest'
      test-packages:
        description: 'Packages to test'
        required: true
        type: string
        default: './...'
      coverage-flag:
        description: 'Coverage flag for Codecov'
        required: false
        type: string
        default: 'unittests'
      timeout-minutes:
        description: 'Timeout for the job'
        required: false
        type: number
        default: 20
      parallel-jobs:
        description: 'Number of parallel test jobs'
        required: false
        type: number
        default: 4
      memory-limit:
        description: 'Memory limit for Go'
        required: false
        type: string
        default: '512MiB'
      gogc:
        description: 'GOGC value for memory optimization'
        required: false
        type: number
        default: 50

jobs:
  test:
    runs-on: ${{ inputs.platform }}
    timeout-minutes: ${{ inputs.timeout-minutes }}
    env:
      GOGC: ${{ inputs.gogc }}
      GOMEMLIMIT: ${{ inputs.memory-limit }}
      GOMAXPROCS: ${{ inputs.parallel-jobs }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ inputs.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ inputs.go-version }}-
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Setup test environment (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          mkdir -p test_output coverage_reports
          chmod 755 test_output coverage_reports

      - name: Setup test environment (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "test_output", "coverage_reports" | Out-Null
          # Clean up previous artifacts
          if (Test-Path "coverage.out") { Remove-Item "coverage.out" -Force }
          if (Test-Path "coverage.html") { Remove-Item "coverage.html" -Force }
          if (Test-Path "*.db") { Remove-Item "*.db" -Force }
          if (Test-Path "gopier.exe") { Remove-Item "gopier.exe" -Force }
          
          # Memory optimization
          $env:GOGC = "${{ inputs.gogc }}"
          $env:GOMEMLIMIT = "${{ inputs.memory-limit }}"
          $env:GOMAXPROCS = "${{ inputs.parallel-jobs }}"
          $env:CGO_ENABLED = "0"

      - name: Build (Windows only)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          echo "Building for Windows with Go ${{ inputs.go-version }}..."
          go build -buildvcs=false -ldflags "-X github.com/sakuhanight/gopier/cmd.Version=test" -o gopier.exe
          if exist "gopier.exe" (
            echo "✓ Build successful"
            gopier.exe --help
          ) else (
            echo "✗ Build failed"
            exit /b 1
          )

      - name: Run tests
        run: |
          echo "Running tests for Go ${{ inputs.go-version }} on ${{ runner.os }}..."
          echo "Packages: ${{ inputs.test-packages }}"
          echo "Memory settings: GOGC=${{ inputs.gogc }}, GOMEMLIMIT=${{ inputs.memory-limit }}, GOMAXPROCS=${{ inputs.parallel-jobs }}"
          
          # Run tests with coverage if coverage flag is provided
          if [ "${{ inputs.coverage-flag }}" != "" ]; then
            echo "Running tests with coverage..."
            go test -v -coverprofile=coverage.out -timeout=10m -parallel=${{ inputs.parallel-jobs }} ${{ inputs.test-packages }}
            
            if [ -f coverage.out ]; then
              go tool cover -html=coverage.out -o coverage.html 2>/dev/null || echo "HTML report generation skipped"
              go tool cover -func=coverage.out || echo "Coverage function report generation skipped"
            fi
          else
            echo "Running tests without coverage..."
            go test -v -timeout=10m -parallel=${{ inputs.parallel-jobs }} ${{ inputs.test-packages }}
          fi

      - name: Upload coverage to Codecov
        if: inputs.coverage-flag != '' && hashFiles('coverage.out') != ''
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: ${{ inputs.coverage-flag }}-${{ inputs.go-version }}
          name: codecov-${{ runner.os }}-${{ inputs.go-version }}
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }} 