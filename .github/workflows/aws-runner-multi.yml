name: AWS Multi-Test Runner

on:
  workflow_call:
    inputs:
      go-version:
        description: 'Go version to use'
        required: true
        type: string
      test-types:
        description: 'Comma-separated list of test types to run'
        required: true
        type: string
        default: 'large-files,integration,benchmark'
      timeout-minutes:
        description: 'Timeout for the job'
        required: false
        type: number
        default: 120

jobs:
  start-runner:
    name: Start AWS EC2 runner
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Check AWS credentials
        run: |
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ] || [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ] || [ -z "${{ secrets.AWS_REGION }}" ]; then
            echo "AWS credentials not configured. Skipping AWS runner tests."
            exit 0
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          ec2-image-id: ${{ secrets.EC2_IMAGE_ID }}
          ec2-instance-type: ${{ secrets.EC2_INSTANCE_TYPE }}
          subnet-id: ${{ secrets.EC2_SUBNET_ID }}
          security-group-id: ${{ secrets.EC2_SECURITY_GROUP_ID }}
          iam-role-name: ${{ secrets.EC2_IAM_ROLE_NAME }}
          aws-resource-tags: >
            [
              {"Key": "Name", "Value": "gopier-multi-test-runner"},
              {"Key": "GitHubRepository", "Value": "${{ github.repository }}"},
              {"Key": "TestTypes", "Value": "${{ inputs.test-types }}"}
            ]
          pre-runner-script: |
            sudo yum update -y
            sudo yum install -y git wget unzip
            # Goのインストール
            wget https://go.dev/dl/go${{ inputs.go-version }}.linux-amd64.tar.gz
            sudo tar -C /usr/local -xzf go${{ inputs.go-version }}.linux-amd64.tar.gz
            echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
            source ~/.bashrc
            # メモリ最適化設定
            echo 'export GOGC=100' >> ~/.bashrc
            echo 'export GOMEMLIMIT=8GiB' >> ~/.bashrc
            echo 'export GOMAXPROCS=16' >> ~/.bashrc

  run-multi-tests:
    name: Run multiple test types on AWS runner
    needs: start-runner
    runs-on: ${{ needs.start-runner.outputs.label }}
    timeout-minutes: ${{ inputs.timeout-minutes }}
    
    # AWSランナー用のメモリ最適化設定
    env:
      GOGC: 100
      GOMEMLIMIT: 8GiB
      GOMAXPROCS: 16
      AWS_RUNNER: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ inputs.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ inputs.go-version }}-

      - name: Install dependencies
        run: go mod download

      - name: Setup test environment
        run: |
          mkdir -p test_output test_data coverage_reports large_test_data benchmark_output
          chmod 755 test_output test_data coverage_reports large_test_data benchmark_output
          
          # システム情報を確認
          echo "=== System Information ==="
          echo "CPU cores: $(nproc)"
          echo "Memory: $(free -h)"
          echo "Disk space: $(df -h)"
          echo "Go version: $(go version)"
          echo "Environment variables:"
          echo "GOGC: $GOGC"
          echo "GOMEMLIMIT: $GOMEMLIMIT"
          echo "GOMAXPROCS: $GOMAXPROCS"

      - name: Run all test types
        run: |
          echo "Running multiple test types on AWS runner..."
          
          # テストタイプを配列に分割
          IFS=',' read -ra TEST_TYPES <<< "${{ inputs.test-types }}"
          
          for test_type in "${TEST_TYPES[@]}"; do
            echo "=== Running $test_type tests ==="
            
            case "$test_type" in
              "large-files")
                echo "Running large file tests..."
                # 大きなファイルテストを実行
                go test -v -timeout=30m -parallel=4 ./internal/copier/... || exit 1
                # ベンチマークテストを実行
                go test -v -bench=. -benchmem -timeout=30m ./internal/copier/... || exit 1
                # カバレッジテストを実行
                PKGS=$(go list ./internal/...)
                go test -v -coverprofile=coverage_large.out -timeout=30m -parallel=4 $PKGS || exit 1
                ;;
              "integration")
                echo "Running integration tests..."
                # 統合テストを実行
                go test -v -timeout=20m -parallel=4 ./tests/... || exit 1
                # カバレッジテストを実行
                PKGS=$(go list ./internal/...)
                go test -v -coverprofile=coverage_integration.out -timeout=20m -parallel=4 $PKGS || exit 1
                ;;
              "benchmark")
                echo "Running benchmark tests..."
                # ベンチマークテストを実行
                go test -v -bench=. -benchmem -timeout=30m ./internal/copier/... > benchmark_output/copier_benchmarks.txt 2>&1 || echo "Copier benchmarks completed"
                go test -v -bench=. -benchmem -timeout=30m ./internal/hasher/... > benchmark_output/hasher_benchmarks.txt 2>&1 || echo "Hasher benchmarks completed"
                go test -v -bench=. -benchmem -timeout=30m ./internal/filter/... > benchmark_output/filter_benchmarks.txt 2>&1 || echo "Filter benchmarks completed"
                ;;
              *)
                echo "Unknown test type: $test_type"
                exit 1
                ;;
            esac
            
            echo "=== Completed $test_type tests ==="
          done
          
          # カバレッジファイルを統合
          if [ -f coverage_large.out ] || [ -f coverage_integration.out ]; then
            if [ -f coverage_large.out ] && [ -f coverage_integration.out ]; then
              # 複数のカバレッジファイルがある場合は統合
              echo "mode: set" > coverage.out
              tail -n +2 coverage_large.out >> coverage.out
              tail -n +2 coverage_integration.out >> coverage.out
            elif [ -f coverage_large.out ]; then
              cp coverage_large.out coverage.out
            else
              cp coverage_integration.out coverage.out
            fi
            
            if [ -f coverage.out ]; then
              go tool cover -html=coverage.out -o coverage.html 2>/dev/null || echo "HTML report generation skipped"
              go tool cover -func=coverage.out || echo "Coverage function report generation skipped"
            fi
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: aws-multi-runner-results-${{ inputs.go-version }}
          path: |
            test_output/
            coverage_reports/
            benchmark_output/
            coverage.out
            coverage.html
            coverage_large.out
            coverage_integration.out
          retention-days: 30

  stop-runner:
    name: Stop AWS EC2 runner
    needs:
      - start-runner
      - run-multi-tests
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }} 