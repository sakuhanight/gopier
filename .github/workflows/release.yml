name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      # キャッシュは一時的に無効化（エラー回避のため）
      # - name: Cache Go modules
      #   uses: actions/cache@v4
      #   with:
      #     path: |
      #       ~/.cache/go-build
      #       ~/go/pkg/mod
      #     key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
      #     restore-keys: |
      #       ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
      #       ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run tests with coverage
        run: |
          go test -v -coverprofile=coverage.out -covermode=atomic ./...
          go test -v -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: release
          name: codecov-release
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  build:
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_name: gopier-linux-amd64
            binary_name: gopier
            goarch: amd64
          - os: windows-latest
            artifact_name: gopier-windows-amd64.exe
            binary_name: gopier.exe
            goarch: amd64
          - os: macos-latest
            artifact_name: gopier-darwin-amd64
            binary_name: gopier
            goarch: amd64
          - os: macos-latest
            artifact_name: gopier-darwin-arm64
            binary_name: gopier
            goarch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      # キャッシュは一時的に無効化（エラー回避のため）
      # - name: Cache Go modules
      #   uses: actions/cache@v4
      #   with:
      #     path: |
      #       ~/.cache/go-build
      #       ~/go/pkg/mod
      #     key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
      #     restore-keys: |
      #       ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
      #       ${{ runner.os }}-go-

      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $env:GOARCH = "${{ matrix.goarch }}"
          go build -ldflags="-s -w" -o ${{ matrix.binary_name }} .
        shell: pwsh

      - name: Build (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          GOARCH=${{ matrix.goarch }} go build -ldflags="-s -w" -o ${{ matrix.binary_name }} .
          chmod +x ${{ matrix.binary_name }}
        shell: bash

      - name: Create release assets (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # バージョン情報を取得
          $VERSION = "${{ github.ref_name }}"
          $VERSIONED_NAME = "${{ matrix.artifact_name }}-$VERSION"
          
          mkdir -p release
          cp ${{ matrix.binary_name }} release/
          cp config.example.yaml release/
          cp README.md release/
          cp LICENSE release/
          cd release
          Compress-Archive -Path * -DestinationPath ../$VERSIONED_NAME.zip -Force
          cd ..

      - name: Create release assets (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          # バージョン情報を取得
          VERSION="${{ github.ref_name }}"
          VERSIONED_NAME="${{ matrix.artifact_name }}-$VERSION"
          
          mkdir -p release
          cp ${{ matrix.binary_name }} release/
          cp config.example.yaml release/
          cp README.md release/
          cp LICENSE release/
          rm -f $VERSIONED_NAME.tar.gz
          tar -czf $VERSIONED_NAME.tar.gz -C release .

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}-${{ github.ref_name }}.*

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Extract changelog section
        id: changelog
        run: |
          # タグ名からバージョンを取得
          VERSION="${GITHUB_REF#refs/tags/}"
          echo "Extracting changelog for version: $VERSION"
          
          # CHANGELOG.mdから該当バージョンのセクションを抽出
          if [[ -f "CHANGELOG.md" ]]; then
            echo "CHANGELOG.md found"
            
            # バージョンセクションの開始行を検索（エスケープを修正）
            START_LINE=$(grep -n "## \\[${VERSION}\\]" CHANGELOG.md | cut -d: -f1)
            echo "Start line: $START_LINE"
            
            if [[ -n "$START_LINE" ]]; then
              # 次のバージョンセクションの開始行を検索
              NEXT_LINE=$(tail -n +$((START_LINE + 1)) CHANGELOG.md | grep -n "## \\[" | head -1 | cut -d: -f1)
              echo "Next line: $NEXT_LINE"
              
              if [[ -n "$NEXT_LINE" ]]; then
                # 次のバージョンセクションがある場合
                END_LINE=$((START_LINE + NEXT_LINE - 1))
                echo "End line: $END_LINE"
                sed -n "${START_LINE},${END_LINE}p" CHANGELOG.md > changelog_section.md
              else
                # 次のバージョンセクションがない場合（最新バージョン）
                echo "No next version found, extracting to end"
                tail -n +${START_LINE} CHANGELOG.md > changelog_section.md
              fi
              
              echo "Extracted changelog content:"
              cat changelog_section.md
              
              # 改行をエスケープしてGitHub Actionsの出力に設定
              CHANGELOG_CONTENT=$(cat changelog_section.md)
              echo "changelog_content<<EOF" >> $GITHUB_OUTPUT
              echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "Version section not found in CHANGELOG.md"
              echo "changelog_content=## ${VERSION} - $(date +%Y-%m-%d)\\n\\n### Added\\n- リリースノートが自動生成されました" >> $GITHUB_OUTPUT
            fi
          else
            echo "CHANGELOG.md not found"
            echo "changelog_content=## ${VERSION} - $(date +%Y-%m-%d)\\n\\n### Added\\n- リリースノートが自動生成されました" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            gopier-linux-amd64/*-${{ github.ref_name }}.tar.gz
            gopier-windows-amd64.exe/*-${{ github.ref_name }}.zip
            gopier-darwin-amd64/*-${{ github.ref_name }}.tar.gz
            gopier-darwin-arm64/*-${{ github.ref_name }}.tar.gz
          body: ${{ steps.changelog.outputs.changelog_content }}
          draft: false
          prerelease: false 