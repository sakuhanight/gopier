name: Run Tests

on:
  workflow_call:
    inputs:
      go-version:
        description: 'Go version to use'
        required: true
        type: string
      platform:
        description: 'Platform to run tests on'
        required: true
        type: string
        default: 'ubuntu-latest'
      coverage-flag:
        description: 'Coverage flag for Codecov'
        required: false
        type: string
        default: 'unittests'
      timeout-minutes:
        description: 'Timeout for the job'
        required: false
        type: number
        default: 30
      test-type:
        description: 'Type of tests to run (unit, integration, or all)'
        required: false
        type: string
        default: 'all'


jobs:
  test:
    runs-on: ${{ fromJSON(inputs.platform) }}
    timeout-minutes: ${{ inputs.timeout-minutes }}


    env:
      GOGC: 50
      GOMEMLIMIT: 512MiB
      GOMAXPROCS: 2
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ inputs.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ inputs.go-version }}-
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Setup test environment (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          mkdir -p test_output test_data coverage_reports
          chmod 755 test_output test_data coverage_reports

      - name: Setup test environment (Windows)
        if: runner.os == 'Windows'
        run: |
          New-Item -ItemType Directory -Force -Path test_output, test_data, coverage_reports
        shell: powershell

      - name: Build (Windows only)
        if: runner.os == 'Windows'
        run: |
          Write-Host "Building with lightweight configuration..."
          
          # 軽量ビルド設定
          $env:GOGC = "200"
          $env:GOMEMLIMIT = "256MiB"
          $env:GOMAXPROCS = "2"
          $env:CGO_ENABLED = "0"
          
          # 依存関係を事前にダウンロード
          Write-Host "Downloading dependencies..."
          go mod download
          
          # 軽量版ビルド実行
          Write-Host "Running lightweight build..."
          $VERSION = "test"
          $BUILD_TIME = Get-Date -Format "yyyy-MM-dd_HH-mm-ss"
          go build -ldflags "-X github.com/sakuhanight/gopier/cmd.Version=$VERSION -X github.com/sakuhanight/gopier/cmd.BuildTime=$BUILD_TIME" -o gopier.exe
          
          if ($LASTEXITCODE -ne 0) {
              Write-Host "Lightweight build failed, trying with build.ps1..."
              .\build.ps1 build
              if ($LASTEXITCODE -ne 0) {
                  Write-Host "Build failed with exit code: $LASTEXITCODE"
                  exit $LASTEXITCODE
              }
          }
          
          # Verify build
          if (Test-Path "gopier.exe") {
              Write-Host "✓ Build successful: gopier.exe exists"
              .\gopier.exe --help
          } else {
              Write-Host "✗ Build failed: gopier.exe not found"
              exit 1
          }
        shell: powershell
        timeout-minutes: 5

      - name: Run internal unit tests (Linux/macOS)
        if: (inputs.test-type == 'unit' || inputs.test-type == 'all') && runner.os != 'Windows'
        run: |
          echo "Running internal unit tests for Go ${{ inputs.go-version }} on ${{ runner.os }}..."
          
          # メモリ最適化設定
          export GOGC=50
          export GOMEMLIMIT=256MiB
          export GOMAXPROCS=2
          
          # Internal unit tests
          echo "Running internal unit tests..."
          go test -v -timeout=10m -parallel=2 ./internal/... || exit 1

      - name: Run cmd unit tests (Linux/macOS)
        if: (inputs.test-type == 'unit' || inputs.test-type == 'all') && runner.os != 'Windows'
        run: |
          echo "Running cmd unit tests for Go ${{ inputs.go-version }} on ${{ runner.os }}..."
          
          # メモリ最適化設定
          export GOGC=50
          export GOMEMLIMIT=256MiB
          export GOMAXPROCS=2
          
          # Cmd unit tests
          echo "Running cmd unit tests..."
          go test -v -timeout=10m -parallel=2 ./cmd/... || exit 1

      - name: Run internal unit tests (Windows)
        if: (inputs.test-type == 'unit' || inputs.test-type == 'all') && runner.os == 'Windows'
        run: |
          Write-Host "Running internal unit tests for Go ${{ inputs.go-version }} on Windows..."
          
          # 環境情報の表示
          Write-Host "Environment information:"
          Write-Host "GOOS: $env:GOOS"
          Write-Host "GOARCH: $env:GOARCH"
          Write-Host "GOROOT: $env:GOROOT"
          Write-Host "GOPATH: $env:GOPATH"
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "Available memory:"
          Get-WmiObject -Class Win32_ComputerSystem | Select-Object TotalPhysicalMemory
          go version
          
          # 軽量メモリ設定
          $env:GOGC = "200"
          $env:GOMEMLIMIT = "256MiB"
          $env:GOMAXPROCS = "2"
          $env:CGO_ENABLED = "0"
          
          # テストファイルの存在確認
          Write-Host "Checking test files..."
          Get-ChildItem -Recurse -Filter "*.go" | Where-Object { $_.FullName -like "*internal*" }
          
          # Internal unit tests (軽量版)
          Write-Host "Running internal unit tests..."
          
          # 個別パッケージでテスト実行
          $packages = go list ./internal/...
          $testExitCode = 0
          
          foreach ($pkg in $packages) {
              Write-Host "Testing package: $pkg"
              go test -v -timeout=5m -parallel=1 $pkg
              if ($LASTEXITCODE -ne 0) {
                  Write-Host "Package $pkg failed with exit code: $LASTEXITCODE"
                  $testExitCode = $LASTEXITCODE
              }
          }
          
          if ($testExitCode -ne 0) {
              Write-Host "Some internal unit tests failed with exit code: $testExitCode"
              Write-Host "Attempting to run with more verbose output..."
              go test -v -timeout=10m -parallel=1 -count=1 ./internal/...
              $retryExitCode = $LASTEXITCODE
              Write-Host "Retry exit code: $retryExitCode"
              exit $testExitCode
          }
        shell: powershell

      - name: Run cmd unit tests (Windows)
        if: (inputs.test-type == 'unit' || inputs.test-type == 'all') && runner.os == 'Windows'
        run: |
          Write-Host "Running cmd unit tests for Go ${{ inputs.go-version }} on Windows..."
          
          # 環境情報の表示
          Write-Host "Environment information:"
          Write-Host "GOOS: $env:GOOS"
          Write-Host "GOARCH: $env:GOARCH"
          Write-Host "GOROOT: $env:GOROOT"
          Write-Host "GOPATH: $env:GOPATH"
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "Available memory:"
          Get-WmiObject -Class Win32_ComputerSystem | Select-Object TotalPhysicalMemory
          go version
          
          # 軽量メモリ設定
          $env:GOGC = "200"
          $env:GOMEMLIMIT = "256MiB"
          $env:GOMAXPROCS = "2"
          $env:CGO_ENABLED = "0"
          
          # テストファイルの存在確認
          Write-Host "Checking test files..."
          Get-ChildItem -Recurse -Filter "*.go" | Where-Object { $_.FullName -like "*cmd*" }
          
          # 依存関係を事前にダウンロード
          Write-Host "Downloading dependencies..."
          go mod download
          
          # Cmd unit tests (軽量版)
          Write-Host "Running cmd unit tests..."
          
          # 個別パッケージでテスト実行
          $packages = go list ./cmd/...
          $testExitCode = 0
          
          foreach ($pkg in $packages) {
              Write-Host "Testing package: $pkg"
              go test -v -timeout=5m -parallel=1 $pkg
              if ($LASTEXITCODE -ne 0) {
                  Write-Host "Package $pkg failed with exit code: $LASTEXITCODE"
                  $testExitCode = $LASTEXITCODE
              }
          }
          
          if ($testExitCode -ne 0) {
              Write-Host "Some cmd unit tests failed with exit code: $testExitCode"
              Write-Host "Attempting to run with more verbose output..."
              go test -v -timeout=10m -parallel=1 -count=1 ./cmd/...
              $retryExitCode = $LASTEXITCODE
              Write-Host "Retry exit code: $retryExitCode"
              exit $testExitCode
          }
        shell: powershell

      - name: Run integration tests (Linux/macOS)
        if: (inputs.test-type == 'integration' || inputs.test-type == 'all') && runner.os != 'Windows'
        run: |
          echo "Running integration tests for Go ${{ inputs.go-version }} on ${{ runner.os }}..."
          
          # メモリ最適化設定
          export GOGC=50
          export GOMEMLIMIT=256MiB
          export GOMAXPROCS=2
          
          # Integration tests
          echo "Running integration tests..."
          go test -v -timeout=10m -parallel=2 ./tests/... || exit 1

      - name: Run integration tests (Windows)
        if: (inputs.test-type == 'integration' || inputs.test-type == 'all') && runner.os == 'Windows'
        run: |
          Write-Host "Running integration tests for Go ${{ inputs.go-version }} on Windows..."
          
          # 軽量メモリ設定
          $env:GOGC = "200"
          $env:GOMEMLIMIT = "256MiB"
          $env:GOMAXPROCS = "2"
          $env:CGO_ENABLED = "0"
          
          # Integration tests (軽量版)
          Write-Host "Running integration tests..."
          go test -v -timeout=5m -parallel=2 ./tests/...
          if ($LASTEXITCODE -ne 0) {
              Write-Host "Integration tests failed with exit code: $LASTEXITCODE"
              exit $LASTEXITCODE
          }
        shell: powershell

      - name: Run coverage tests (Linux/macOS)
        if: inputs.test-type == 'all' && runner.os != 'Windows'
        run: |
          echo "Running tests with coverage..."
          
          # メモリ最適化設定
          export GOGC=50
          export GOMEMLIMIT=256MiB
          export GOMAXPROCS=2
          
          # Coverage tests
          PKGS=$(go list ./internal/...)
          go test -v -coverprofile=coverage.out -timeout=10m -parallel=2 $PKGS || exit 1
          
          if [ -f coverage.out ]; then
            go tool cover -html=coverage.out -o coverage.html 2>/dev/null || echo "HTML report generation skipped"
            go tool cover -func=coverage.out || echo "Coverage function report generation skipped"
          fi

      - name: Run coverage tests (Windows)
        if: inputs.test-type == 'all' && runner.os == 'Windows'
        run: |
          Write-Host "Running tests with coverage on Windows..."
          
          # 環境情報の表示
          Write-Host "Environment information:"
          Write-Host "GOOS: $env:GOOS"
          Write-Host "GOARCH: $env:GOARCH"
          Write-Host "Current directory: $(Get-Location)"
          go version
          
          # 軽量メモリ設定
          $env:GOGC = "200"
          $env:GOMEMLIMIT = "256MiB"
          $env:GOMAXPROCS = "2"
          $env:CGO_ENABLED = "0"
          
          # 依存関係を事前にダウンロード
          Write-Host "Downloading dependencies..."
          go mod download
          
          # Coverage tests (軽量版)
          Write-Host "Running coverage tests..."
          go test -v -coverprofile=coverage.out -timeout=10m -parallel=1 ./internal/...
          if ($LASTEXITCODE -ne 0) {
              Write-Host "Coverage tests failed with exit code: $LASTEXITCODE"
              Write-Host "Attempting to run with more verbose output..."
              go test -v -coverprofile=coverage.out -timeout=15m -parallel=1 -count=1 ./internal/...
              $retryExitCode = $LASTEXITCODE
              Write-Host "Retry exit code: $retryExitCode"
              exit $LASTEXITCODE
          }
          
          if (Test-Path "coverage.out") {
              Write-Host "Coverage file generated successfully"
              go tool cover -html=coverage.out -o coverage.html 2>$null || Write-Host "HTML report generation skipped"
              go tool cover -func=coverage.out || Write-Host "Coverage function report generation skipped"
          } else {
              Write-Host "Coverage file not found"
              exit 1
          }
        shell: powershell

      - name: Upload coverage to Codecov
        if: inputs.test-type == 'all' && hashFiles('coverage.out') != ''
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: ${{ inputs.coverage-flag }}-${{ inputs.go-version }}
          name: codecov-${{ runner.os }}-${{ inputs.go-version }}
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }} 