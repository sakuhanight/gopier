name: Run Tests

on:
  workflow_call:
    inputs:
      go-version:
        description: 'Go version to use'
        required: true
        type: string
      platform:
        description: 'Platform to run tests on'
        required: true
        type: string
        default: 'ubuntu-latest'
      coverage-flag:
        description: 'Coverage flag for Codecov'
        required: false
        type: string
        default: 'unittests'
      timeout-minutes:
        description: 'Timeout for the job'
        required: false
        type: number
        default: 30
      test-type:
        description: 'Type of tests to run (unit, integration, or all)'
        required: false
        type: string
        default: 'all'


jobs:
  test:
    runs-on: ${{ fromJSON(inputs.platform) }}
    timeout-minutes: ${{ inputs.timeout-minutes }}


    env:
      GOGC: 50
      GOMEMLIMIT: 512MiB
      GOMAXPROCS: 2
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ inputs.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ inputs.go-version }}-
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Setup test environment (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          mkdir -p test_output test_data coverage_reports
          chmod 755 test_output test_data coverage_reports

      - name: Setup test environment (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir test_output 2>nul
          mkdir test_data 2>nul
          mkdir coverage_reports 2>nul
        shell: cmd

      - name: Build (Windows only)
        if: runner.os == 'Windows'
        run: |
          echo "Building with lightweight configuration..."
          
          REM 軽量ビルド設定
          set GOGC=200
          set GOMEMLIMIT=256MiB
          set GOMAXPROCS=2
          set CGO_ENABLED=0
          
          REM 依存関係を事前にダウンロード
          echo "Downloading dependencies..."
          go mod download
          
          REM 軽量版ビルド実行
          echo "Running lightweight build..."
          VERSION=test
          BUILD_TIME=%DATE%_%TIME%
          go build -ldflags "-X github.com/sakuhanight/gopier/cmd.Version=%VERSION% -X github.com/sakuhanight/gopier/cmd.BuildTime=%BUILD_TIME%" -o gopier.exe
          if %ERRORLEVEL% neq 0 (
            echo "Lightweight build failed, trying with build.ps1..."
            build.ps1 build
            if %ERRORLEVEL% neq 0 (
              echo "Build failed with exit code: %ERRORLEVEL%"
              exit /b %ERRORLEVEL%
            )
          )
          
          REM Verify build
          if exist "gopier.exe" (
            echo "✓ Build successful: gopier.exe exists"
            gopier.exe --help
          ) else (
            echo "✗ Build failed: gopier.exe not found"
            exit /b 1
          )
        shell: cmd
        timeout-minutes: 5

      - name: Run internal unit tests (Linux/macOS)
        if: (inputs.test-type == 'unit' || inputs.test-type == 'all') && runner.os != 'Windows'
        run: |
          echo "Running internal unit tests for Go ${{ inputs.go-version }} on ${{ runner.os }}..."
          
          # メモリ最適化設定
          export GOGC=50
          export GOMEMLIMIT=256MiB
          export GOMAXPROCS=2
          
          # Internal unit tests
          echo "Running internal unit tests..."
          go test -v -timeout=10m -parallel=2 ./internal/... || exit 1

      - name: Run cmd unit tests (Linux/macOS)
        if: (inputs.test-type == 'unit' || inputs.test-type == 'all') && runner.os != 'Windows'
        run: |
          echo "Running cmd unit tests for Go ${{ inputs.go-version }} on ${{ runner.os }}..."
          
          # メモリ最適化設定
          export GOGC=50
          export GOMEMLIMIT=256MiB
          export GOMAXPROCS=2
          
          # Cmd unit tests
          echo "Running cmd unit tests..."
          go test -v -timeout=10m -parallel=2 ./cmd/... || exit 1

      - name: Run internal unit tests (Windows)
        if: (inputs.test-type == 'unit' || inputs.test-type == 'all') && runner.os == 'Windows'
        run: |
          echo "Running internal unit tests for Go ${{ inputs.go-version }} on Windows..."
          
          REM 環境情報の表示
          echo "Environment information:"
          echo "GOOS: %GOOS%"
          echo "GOARCH: %GOARCH%"
          echo "GOROOT: %GOROOT%"
          echo "GOPATH: %GOPATH%"
          echo "Current directory: %CD%"
          echo "Available memory:"
          wmic computersystem get TotalPhysicalMemory
          go version
          
          REM 軽量メモリ設定
          set GOGC=200
          set GOMEMLIMIT=256MiB
          set GOMAXPROCS=2
          set CGO_ENABLED=0
          
          REM テストファイルの存在確認
          echo "Checking test files..."
          dir /s /b *.go | findstr internal
          
          REM Internal unit tests (軽量版)
          echo "Running internal unit tests..."
          
          REM 個別パッケージでテスト実行
          for /f "tokens=*" %%p in ('go list ./internal/...') do (
            echo "Testing package: %%p"
            go test -v -timeout=5m -parallel=1 %%p
            if !ERRORLEVEL! neq 0 (
              echo "Package %%p failed with exit code: !ERRORLEVEL!"
              set TEST_EXIT_CODE=!ERRORLEVEL!
            )
          )
          
          if %TEST_EXIT_CODE% neq 0 (
            echo "Some internal unit tests failed with exit code: %TEST_EXIT_CODE%"
            echo "Attempting to run with more verbose output..."
            go test -v -timeout=10m -parallel=1 -count=1 ./internal/...
            set RETRY_EXIT_CODE=%ERRORLEVEL%
            echo "Retry exit code: %RETRY_EXIT_CODE%"
            exit /b %TEST_EXIT_CODE%
          )
        shell: cmd

      - name: Run cmd unit tests (Windows)
        if: (inputs.test-type == 'unit' || inputs.test-type == 'all') && runner.os == 'Windows'
        run: |
          echo "Running cmd unit tests for Go ${{ inputs.go-version }} on Windows..."
          
          REM 環境情報の表示
          echo "Environment information:"
          echo "GOOS: %GOOS%"
          echo "GOARCH: %GOARCH%"
          echo "GOROOT: %GOROOT%"
          echo "GOPATH: %GOPATH%"
          echo "Current directory: %CD%"
          echo "Available memory:"
          wmic computersystem get TotalPhysicalMemory
          go version
          
          REM 軽量メモリ設定
          set GOGC=200
          set GOMEMLIMIT=256MiB
          set GOMAXPROCS=2
          set CGO_ENABLED=0
          
          REM テストファイルの存在確認
          echo "Checking test files..."
          dir /s /b *.go | findstr cmd
          
          REM 依存関係を事前にダウンロード
          echo "Downloading dependencies..."
          go mod download
          
          REM Cmd unit tests (軽量版)
          echo "Running cmd unit tests..."
          
          REM 個別パッケージでテスト実行
          set TEST_EXIT_CODE=0
          for /f "tokens=*" %%p in ('go list ./cmd/...') do (
            echo "Testing package: %%p"
            go test -v -timeout=5m -parallel=1 %%p
            if !ERRORLEVEL! neq 0 (
              echo "Package %%p failed with exit code: !ERRORLEVEL!"
              set TEST_EXIT_CODE=!ERRORLEVEL!
            )
          )
          
          if %TEST_EXIT_CODE% neq 0 (
            echo "Some cmd unit tests failed with exit code: %TEST_EXIT_CODE%"
            echo "Attempting to run with more verbose output..."
            go test -v -timeout=10m -parallel=1 -count=1 ./cmd/...
            set RETRY_EXIT_CODE=%ERRORLEVEL%
            echo "Retry exit code: %RETRY_EXIT_CODE%"
            exit /b %TEST_EXIT_CODE%
          )
        shell: cmd

      - name: Run integration tests (Linux/macOS)
        if: (inputs.test-type == 'integration' || inputs.test-type == 'all') && runner.os != 'Windows'
        run: |
          echo "Running integration tests for Go ${{ inputs.go-version }} on ${{ runner.os }}..."
          
          # メモリ最適化設定
          export GOGC=50
          export GOMEMLIMIT=256MiB
          export GOMAXPROCS=2
          
          # Integration tests
          echo "Running integration tests..."
          go test -v -timeout=10m -parallel=2 ./tests/... || exit 1

      - name: Run integration tests (Windows)
        if: (inputs.test-type == 'integration' || inputs.test-type == 'all') && runner.os == 'Windows'
        run: |
          echo "Running integration tests for Go ${{ inputs.go-version }} on Windows..."
          
          REM 軽量メモリ設定
          set GOGC=200
          set GOMEMLIMIT=256MiB
          set GOMAXPROCS=2
          set CGO_ENABLED=0
          
          REM Integration tests (軽量版)
          echo "Running integration tests..."
          go test -v -timeout=5m -parallel=2 ./tests/...
          if %ERRORLEVEL% neq 0 (
            echo "Integration tests failed with exit code: %ERRORLEVEL%"
            exit /b %ERRORLEVEL%
          )
        shell: cmd

      - name: Run coverage tests (Linux/macOS)
        if: inputs.test-type == 'all' && runner.os != 'Windows'
        run: |
          echo "Running tests with coverage..."
          
          # メモリ最適化設定
          export GOGC=50
          export GOMEMLIMIT=256MiB
          export GOMAXPROCS=2
          
          # Coverage tests
          PKGS=$(go list ./internal/...)
          go test -v -coverprofile=coverage.out -timeout=10m -parallel=2 $PKGS || exit 1
          
          if [ -f coverage.out ]; then
            go tool cover -html=coverage.out -o coverage.html 2>/dev/null || echo "HTML report generation skipped"
            go tool cover -func=coverage.out || echo "Coverage function report generation skipped"
          fi

      - name: Run coverage tests (Windows)
        if: inputs.test-type == 'all' && runner.os == 'Windows'
        run: |
          echo "Running tests with coverage on Windows..."
          
          REM 軽量メモリ設定
          set GOGC=200
          set GOMEMLIMIT=256MiB
          set GOMAXPROCS=2
          set CGO_ENABLED=0
          
          REM Coverage tests (軽量版)
          for /f "tokens=*" %%i in ('go list ./internal/...') do set PKGS=%%i
          go test -v -coverprofile=coverage.out -timeout=5m -parallel=2 %PKGS%
          if %ERRORLEVEL% neq 0 (
            echo "Coverage tests failed with exit code: %ERRORLEVEL%"
            exit /b %ERRORLEVEL%
          )
          
          if exist "coverage.out" (
            go tool cover -html=coverage.out -o coverage.html 2>nul || echo "HTML report generation skipped"
            go tool cover -func=coverage.out || echo "Coverage function report generation skipped"
          )
        shell: cmd

      - name: Upload coverage to Codecov
        if: inputs.test-type == 'all' && hashFiles('coverage.out') != ''
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: ${{ inputs.coverage-flag }}-${{ inputs.go-version }}
          name: codecov-${{ runner.os }}-${{ inputs.go-version }}
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }} 