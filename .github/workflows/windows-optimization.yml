name: Windows Test Optimization

on:
  workflow_call:
    inputs:
      go-version:
        description: 'Go version to use'
        required: true
        type: string
      test-packages:
        description: 'Test packages to run'
        required: true
        type: string
      coverage-flag:
        description: 'Coverage flag for Codecov'
        required: false
        type: string
        default: 'windows-optimized'
      timeout-minutes:
        description: 'Timeout for the job'
        required: false
        type: number
        default: 20

jobs:
  test-optimized:
    runs-on: windows-latest
    timeout-minutes: ${{ inputs.timeout-minutes }}
    
    # Windows環境での基本設定
    env:
      CGO_ENABLED: 0
      GOFLAGS: "-buildvcs=false"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # 浅いクローンでメモリ節約

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ inputs.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ inputs.go-version }}-

      - name: Setup Windows environment
        run: |
          # メモリ使用量を確認
          Write-Host "=== System Memory Info ==="
          try {
            $memoryInfo = Get-ComputerInfo | Select-Object TotalPhysicalMemory, AvailablePhysicalMemory
            Write-Host "Total memory: $([math]::Round($memoryInfo.TotalPhysicalMemory / 1MB, 0)) MB"
            Write-Host "Available memory: $([math]::Round($memoryInfo.AvailablePhysicalMemory / 1MB, 0)) MB"
          } catch {
            Write-Host "Memory info: Unable to get system information"
          }
          
          # プロセスメモリ使用量を確認
          Write-Host "=== Process Memory Usage ==="
          Get-Process | Where-Object {$_.WorkingSet -gt 50MB} | Sort-Object WorkingSet -Descending | Select-Object -First 10 | Format-Table Name, @{Name="Memory(MB)";Expression={[math]::Round($_.WorkingSet / 1MB, 0)}} -AutoSize
          
          # ディスク容量を確認
          Write-Host "=== Disk Space ==="
          Get-WmiObject -Class Win32_LogicalDisk | Format-Table DeviceID, @{Name="Size(GB)";Expression={[math]::Round($_.Size / 1GB, 0)}}, @{Name="FreeSpace(GB)";Expression={[math]::Round($_.FreeSpace / 1GB, 0)}} -AutoSize
          
          # テスト環境をセットアップ
          New-Item -ItemType Directory -Force -Path "test_output", "test_data", "coverage_reports" | Out-Null
          
          # 既存のファイルをクリーンアップ
          if (Test-Path "coverage.out") { Remove-Item "coverage.out" -Force }
          if (Test-Path "coverage.html") { Remove-Item "coverage.html" -Force }
          if (Test-Path "*.db") { Remove-Item "*.db" -Force }
          if (Test-Path "gopier.exe") { Remove-Item "gopier.exe" -Force }
          
          # 不要なプロセスを終了
          Get-Process | Where-Object {$_.ProcessName -like "*go*" -or $_.ProcessName -like "*gopier*"} | Stop-Process -Force -ErrorAction SilentlyContinue
          
          # 基本設定
          $env:CGO_ENABLED = "0"
          $env:GOFLAGS = "-buildvcs=false"
          
          Write-Host "=== Environment Variables ==="
          Write-Host "CGO_ENABLED: $env:CGO_ENABLED"
          Write-Host "GOFLAGS: $env:GOFLAGS"
        shell: pwsh

      - name: Install dependencies
        run: |
          Write-Host "Installing dependencies..."
          
          # 依存関係を段階的にインストール
          Write-Host "Step 1: Verifying go.mod..."
          go mod verify
          
          Write-Host "Step 2: Downloading modules..."
          go mod download
          
          Write-Host "Step 3: Tidying modules..."
          go mod tidy
          
          # 依存関係のサイズを確認
          Write-Host "=== Module Cache Size ==="
          $moduleCache = "$env:GOPATH/pkg/mod"
          if (Test-Path $moduleCache) {
            $size = (Get-ChildItem -Path $moduleCache -Recurse | Measure-Object -Property Length -Sum).Sum
            Write-Host "Module cache size: $([math]::Round($size / 1MB, 0)) MB"
          }
          
          Write-Host "Dependencies installed successfully"
        shell: pwsh

      - name: Run optimized tests
        run: |
          Write-Host "Running optimized tests for packages: ${{ inputs.test-packages }}"
          
          # テスト実行前のメモリ状態を確認
          Write-Host "=== Pre-test Memory State ==="
          $memoryBefore = (Get-Process -Id $PID).WorkingSet
          Write-Host "Current process memory: $([math]::Round($memoryBefore / 1MB, 0)) MB"
          
          # テスト実行
          $testResult = go test -v -timeout=8m ${{ inputs.test-packages }}
          $exitCode = $LASTEXITCODE
          
          # テスト実行後のメモリ状態を確認
          Write-Host "=== Post-test Memory State ==="
          $memoryAfter = (Get-Process -Id $PID).WorkingSet
          Write-Host "Current process memory: $([math]::Round($memoryAfter / 1MB, 0)) MB"
          Write-Host "Memory increase: $([math]::Round(($memoryAfter - $memoryBefore) / 1MB, 0)) MB"
          
          # 結果を出力
          Write-Host "=== Test Output ==="
          Write-Host $testResult
          
          # 終了コードを確認
          if ($exitCode -ne 0) {
            Write-Host "Tests failed with exit code: $exitCode"
            exit $exitCode
          }
          
          Write-Host "Tests completed successfully"
        shell: pwsh

      - name: Upload coverage (if available)
        if: hashFiles('coverage.out') != ''
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: ${{ inputs.coverage-flag }}-${{ inputs.go-version }}
          name: codecov-windows-optimized-${{ inputs.go-version }}
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }} 